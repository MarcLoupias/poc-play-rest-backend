# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="4XH6@p6/mAaE1G0NfJQGvqDZn`^F@Ju^anQnlt_Ptg6ty1ds8LCYXI7oTE<G6D0v"

# The application languages
# ~~~~~
application.langs="en,fr"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
 db.default.driver=com.mysql.jdbc.Driver
 # see conf/configure.sh to fill that
 db.default.url=${PPRB_DB_URL}
 db.default.user=${PPRB_DB_USER}
 db.default.password=${PPRB_DB_PWD}
 jpa.default=defaultPersistenceUnit
 db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# User password security settings
# ~~~~~
# For each user, this config is saved with the user during creation (see models.user.User class)
# then each time an existing user need to manage password, the saved config is used instead of
# this one.
# So if u wanna changes values for existing users, just change config here and ask your users to change their passwords.

# Define nb iterations for PBKDF2 algorithm hash part.
security.user.pwd.iterations=10000

# Define generated salt length (in byte)
security.user.pwd.salt.byte.length=16

# Define PBKDF2 derivated key length (in bits)
security.user.pwd.PBKDF2.bit.length=256

# Define PBKDF2 algorithm
security.user.pwd.algo=PBKDF2WithHmacSHA1
